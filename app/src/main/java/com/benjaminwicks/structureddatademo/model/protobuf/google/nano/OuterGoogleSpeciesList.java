// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.benjaminwicks.structureddatademo.model.protobuf.google.nano;

@SuppressWarnings("hiding")
public interface OuterGoogleSpeciesList {

    final class SpeciesList extends
            com.google.protobuf.nano.MessageNano {

        public static final class Species extends
                com.google.protobuf.nano.MessageNano {

            private static volatile Species[] _emptyArray;

            public static Species[] emptyArray() {
                // Lazily initializes the empty array
                if (_emptyArray == null) {
                    synchronized (
                            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
                        if (_emptyArray == null) {
                            _emptyArray = new Species[0];
                        }
                    }
                }
                return _emptyArray;
            }

            // optional string kingdom = 1;
            public String kingdom;

            // optional string parent = 2;
            public String parent;

            // optional string family = 3;
            public String family;

            // optional string imageURL = 4;
            public String imageURL;

            // optional string lastInterpreted = 5;
            public String lastInterpreted;

            // optional string accordingTo = 6;
            public String accordingTo;

            // optional int32 speciesKey = 7;
            public int speciesKey;

            // optional string canonicalName = 8;
            public String canonicalName;

            // optional string theClass = 9;
            public String theClass;

            // optional string order = 10;
            public String order;

            // optional string phylum = 11;
            public String phylum;

            // optional string scientificName = 12;
            public String scientificName;

            // optional string authorship = 13;
            public String authorship;

            // optional string genus = 14;
            public String genus;

            // optional int32 parentKey = 15;
            public int parentKey;

            // optional string species = 16;
            public String species;

            // optional string lastCrawled = 17;
            public String lastCrawled;

            public Species() {
                clear();
            }

            public Species clear() {
                kingdom = "";
                parent = "";
                family = "";
                imageURL = "";
                lastInterpreted = "";
                accordingTo = "";
                speciesKey = 0;
                canonicalName = "";
                theClass = "";
                order = "";
                phylum = "";
                scientificName = "";
                authorship = "";
                genus = "";
                parentKey = 0;
                species = "";
                lastCrawled = "";
                cachedSize = -1;
                return this;
            }

            @Override
            public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
                    throws java.io.IOException {
                if (!this.kingdom.equals("")) {
                    output.writeString(1, this.kingdom);
                }
                if (!this.parent.equals("")) {
                    output.writeString(2, this.parent);
                }
                if (!this.family.equals("")) {
                    output.writeString(3, this.family);
                }
                if (!this.imageURL.equals("")) {
                    output.writeString(4, this.imageURL);
                }
                if (!this.lastInterpreted.equals("")) {
                    output.writeString(5, this.lastInterpreted);
                }
                if (!this.accordingTo.equals("")) {
                    output.writeString(6, this.accordingTo);
                }
                if (this.speciesKey != 0) {
                    output.writeInt32(7, this.speciesKey);
                }
                if (!this.canonicalName.equals("")) {
                    output.writeString(8, this.canonicalName);
                }
                if (!this.theClass.equals("")) {
                    output.writeString(9, this.theClass);
                }
                if (!this.order.equals("")) {
                    output.writeString(10, this.order);
                }
                if (!this.phylum.equals("")) {
                    output.writeString(11, this.phylum);
                }
                if (!this.scientificName.equals("")) {
                    output.writeString(12, this.scientificName);
                }
                if (!this.authorship.equals("")) {
                    output.writeString(13, this.authorship);
                }
                if (!this.genus.equals("")) {
                    output.writeString(14, this.genus);
                }
                if (this.parentKey != 0) {
                    output.writeInt32(15, this.parentKey);
                }
                if (!this.species.equals("")) {
                    output.writeString(16, this.species);
                }
                if (!this.lastCrawled.equals("")) {
                    output.writeString(17, this.lastCrawled);
                }
                super.writeTo(output);
            }

            @Override
            protected int computeSerializedSize() {
                int size = super.computeSerializedSize();
                if (!this.kingdom.equals("")) {
                    size += com.google.protobuf.nano.CodedOutputByteBufferNano
                            .computeStringSize(1, this.kingdom);
                }
                if (!this.parent.equals("")) {
                    size += com.google.protobuf.nano.CodedOutputByteBufferNano
                            .computeStringSize(2, this.parent);
                }
                if (!this.family.equals("")) {
                    size += com.google.protobuf.nano.CodedOutputByteBufferNano
                            .computeStringSize(3, this.family);
                }
                if (!this.imageURL.equals("")) {
                    size += com.google.protobuf.nano.CodedOutputByteBufferNano
                            .computeStringSize(4, this.imageURL);
                }
                if (!this.lastInterpreted.equals("")) {
                    size += com.google.protobuf.nano.CodedOutputByteBufferNano
                            .computeStringSize(5, this.lastInterpreted);
                }
                if (!this.accordingTo.equals("")) {
                    size += com.google.protobuf.nano.CodedOutputByteBufferNano
                            .computeStringSize(6, this.accordingTo);
                }
                if (this.speciesKey != 0) {
                    size += com.google.protobuf.nano.CodedOutputByteBufferNano
                            .computeInt32Size(7, this.speciesKey);
                }
                if (!this.canonicalName.equals("")) {
                    size += com.google.protobuf.nano.CodedOutputByteBufferNano
                            .computeStringSize(8, this.canonicalName);
                }
                if (!this.theClass.equals("")) {
                    size += com.google.protobuf.nano.CodedOutputByteBufferNano
                            .computeStringSize(9, this.theClass);
                }
                if (!this.order.equals("")) {
                    size += com.google.protobuf.nano.CodedOutputByteBufferNano
                            .computeStringSize(10, this.order);
                }
                if (!this.phylum.equals("")) {
                    size += com.google.protobuf.nano.CodedOutputByteBufferNano
                            .computeStringSize(11, this.phylum);
                }
                if (!this.scientificName.equals("")) {
                    size += com.google.protobuf.nano.CodedOutputByteBufferNano
                            .computeStringSize(12, this.scientificName);
                }
                if (!this.authorship.equals("")) {
                    size += com.google.protobuf.nano.CodedOutputByteBufferNano
                            .computeStringSize(13, this.authorship);
                }
                if (!this.genus.equals("")) {
                    size += com.google.protobuf.nano.CodedOutputByteBufferNano
                            .computeStringSize(14, this.genus);
                }
                if (this.parentKey != 0) {
                    size += com.google.protobuf.nano.CodedOutputByteBufferNano
                            .computeInt32Size(15, this.parentKey);
                }
                if (!this.species.equals("")) {
                    size += com.google.protobuf.nano.CodedOutputByteBufferNano
                            .computeStringSize(16, this.species);
                }
                if (!this.lastCrawled.equals("")) {
                    size += com.google.protobuf.nano.CodedOutputByteBufferNano
                            .computeStringSize(17, this.lastCrawled);
                }
                return size;
            }

            @Override
            public Species mergeFrom(
                    com.google.protobuf.nano.CodedInputByteBufferNano input)
                    throws java.io.IOException {
                while (true) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            return this;
                        default: {
                            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
                                return this;
                            }
                            break;
                        }
                        case 10: {
                            this.kingdom = input.readString();
                            break;
                        }
                        case 18: {
                            this.parent = input.readString();
                            break;
                        }
                        case 26: {
                            this.family = input.readString();
                            break;
                        }
                        case 34: {
                            this.imageURL = input.readString();
                            break;
                        }
                        case 42: {
                            this.lastInterpreted = input.readString();
                            break;
                        }
                        case 50: {
                            this.accordingTo = input.readString();
                            break;
                        }
                        case 56: {
                            this.speciesKey = input.readInt32();
                            break;
                        }
                        case 66: {
                            this.canonicalName = input.readString();
                            break;
                        }
                        case 74: {
                            this.theClass = input.readString();
                            break;
                        }
                        case 82: {
                            this.order = input.readString();
                            break;
                        }
                        case 90: {
                            this.phylum = input.readString();
                            break;
                        }
                        case 98: {
                            this.scientificName = input.readString();
                            break;
                        }
                        case 106: {
                            this.authorship = input.readString();
                            break;
                        }
                        case 114: {
                            this.genus = input.readString();
                            break;
                        }
                        case 120: {
                            this.parentKey = input.readInt32();
                            break;
                        }
                        case 130: {
                            this.species = input.readString();
                            break;
                        }
                        case 138: {
                            this.lastCrawled = input.readString();
                            break;
                        }
                    }
                }
            }

            public static Species parseFrom(byte[] data)
                    throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
                return com.google.protobuf.nano.MessageNano.mergeFrom(new Species(), data);
            }

            public static Species parseFrom(
                    com.google.protobuf.nano.CodedInputByteBufferNano input)
                    throws java.io.IOException {
                return new Species().mergeFrom(input);
            }
        }

        private static volatile SpeciesList[] _emptyArray;

        public static SpeciesList[] emptyArray() {
            // Lazily initializes the empty array
            if (_emptyArray == null) {
                synchronized (
                        com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
                    if (_emptyArray == null) {
                        _emptyArray = new SpeciesList[0];
                    }
                }
            }
            return _emptyArray;
        }

        // repeated .benjaminwicks.structureddatademo.model.protobuf.google.SpeciesList.Species speciesList = 1;
        public OuterGoogleSpeciesList.SpeciesList.Species[] speciesList;

        public SpeciesList() {
            clear();
        }

        public SpeciesList clear() {
            speciesList = OuterGoogleSpeciesList.SpeciesList.Species.emptyArray();
            cachedSize = -1;
            return this;
        }

        @Override
        public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
                throws java.io.IOException {
            if (this.speciesList != null && this.speciesList.length > 0) {
                for (int i = 0; i < this.speciesList.length; i++) {
                    OuterGoogleSpeciesList.SpeciesList.Species element = this.speciesList[i];
                    if (element != null) {
                        output.writeMessage(1, element);
                    }
                }
            }
            super.writeTo(output);
        }

        @Override
        protected int computeSerializedSize() {
            int size = super.computeSerializedSize();
            if (this.speciesList != null && this.speciesList.length > 0) {
                for (int i = 0; i < this.speciesList.length; i++) {
                    OuterGoogleSpeciesList.SpeciesList.Species element = this.speciesList[i];
                    if (element != null) {
                        size += com.google.protobuf.nano.CodedOutputByteBufferNano
                                .computeMessageSize(1, element);
                    }
                }
            }
            return size;
        }

        @Override
        public SpeciesList mergeFrom(
                com.google.protobuf.nano.CodedInputByteBufferNano input)
                throws java.io.IOException {
            while (true) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        return this;
                    default: {
                        if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
                            return this;
                        }
                        break;
                    }
                    case 10: {
                        int arrayLength = com.google.protobuf.nano.WireFormatNano
                                .getRepeatedFieldArrayLength(input, 10);
                        int i = this.speciesList == null ? 0 : this.speciesList.length;
                        OuterGoogleSpeciesList.SpeciesList.Species[] newArray =
                                new OuterGoogleSpeciesList.SpeciesList.Species[i + arrayLength];
                        if (i != 0) {
                            System.arraycopy(this.speciesList, 0, newArray, 0, i);
                        }
                        for (; i < newArray.length - 1; i++) {
                            newArray[i] = new OuterGoogleSpeciesList.SpeciesList.Species();
                            input.readMessage(newArray[i]);
                            input.readTag();
                        }
                        // Last one without readTag.
                        newArray[i] = new OuterGoogleSpeciesList.SpeciesList.Species();
                        input.readMessage(newArray[i]);
                        this.speciesList = newArray;
                        break;
                    }
                }
            }
        }

        public static SpeciesList parseFrom(byte[] data)
                throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
            return com.google.protobuf.nano.MessageNano.mergeFrom(new SpeciesList(), data);
        }

        public static SpeciesList parseFrom(
                com.google.protobuf.nano.CodedInputByteBufferNano input)
                throws java.io.IOException {
            return new SpeciesList().mergeFrom(input);
        }
    }
}
