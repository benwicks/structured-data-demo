// Code generated by dagger-compiler.  Do not edit.
package com.benjaminwicks.structureddatademo;

import dagger.internal.Binding;
import dagger.internal.BindingsGroup;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class ApplicationModule$$ModuleAdapter extends ModuleAdapter<ApplicationModule> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public ApplicationModule$$ModuleAdapter() {
    super(com.benjaminwicks.structureddatademo.ApplicationModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, true /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, ApplicationModule module) {
    bindings.contributeProvidesBinding("@com.benjaminwicks.structureddatademo.ForApplication()/android.content.Context", new ProvideApplicationContextProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.squareup.picasso.Picasso", new ProvidePicassoProvidesAdapter(module));
  }

  /**
   * A {@code Binding<android.content.Context>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.content.Context>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideApplicationContextProvidesAdapter extends ProvidesBinding<android.content.Context>
      implements Provider<android.content.Context> {
    private final ApplicationModule module;

    public ProvideApplicationContextProvidesAdapter(ApplicationModule module) {
      super("@com.benjaminwicks.structureddatademo.ForApplication()/android.content.Context", NOT_SINGLETON, "com.benjaminwicks.structureddatademo.ApplicationModule", "provideApplicationContext");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.content.Context>}.
     */
    @Override
    public android.content.Context get() {
      return module.provideApplicationContext();
    }
  }

  /**
   * A {@code Binding<com.squareup.picasso.Picasso>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.squareup.picasso.Picasso} and its
   * dependencies.
   *
   * Being a {@code Provider<com.squareup.picasso.Picasso>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidePicassoProvidesAdapter extends ProvidesBinding<com.squareup.picasso.Picasso>
      implements Provider<com.squareup.picasso.Picasso> {
    private final ApplicationModule module;
    private Binding<android.content.Context> context;

    public ProvidePicassoProvidesAdapter(ApplicationModule module) {
      super("com.squareup.picasso.Picasso", IS_SINGLETON, "com.benjaminwicks.structureddatademo.ApplicationModule", "providePicasso");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      context = (Binding<android.content.Context>) linker.requestBinding("@com.benjaminwicks.structureddatademo.ForApplication()/android.content.Context", ApplicationModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(context);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.squareup.picasso.Picasso>}.
     */
    @Override
    public com.squareup.picasso.Picasso get() {
      return module.providePicasso(context.get());
    }
  }
}
