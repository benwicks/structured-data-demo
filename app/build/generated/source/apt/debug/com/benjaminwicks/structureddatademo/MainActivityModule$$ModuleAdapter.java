// Code generated by dagger-compiler.  Do not edit.
package com.benjaminwicks.structureddatademo;

import dagger.internal.Binding;
import dagger.internal.BindingsGroup;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class MainActivityModule$$ModuleAdapter extends ModuleAdapter<MainActivityModule> {
  private static final String[] INJECTS = { "members/com.benjaminwicks.structureddatademo.MainActivity", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public MainActivityModule$$ModuleAdapter() {
    super(com.benjaminwicks.structureddatademo.MainActivityModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, false /*library*/);
  }

  @Override
  public MainActivityModule newModule() {
    return new com.benjaminwicks.structureddatademo.MainActivityModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, MainActivityModule module) {
    bindings.contributeProvidesBinding("com.benjaminwicks.structureddatademo.ScreenManager", new ProvideScreenManagerProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.jaynewstrom.screenswitcher.ScreenSwitcherState", new ProvideScreenSwitcherStateProvidesAdapter(module));
  }

  /**
   * A {@code Binding<com.benjaminwicks.structureddatademo.ScreenManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.benjaminwicks.structureddatademo.ScreenManager} and its
   * dependencies.
   *
   * Being a {@code Provider<com.benjaminwicks.structureddatademo.ScreenManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideScreenManagerProvidesAdapter extends ProvidesBinding<ScreenManager>
      implements Provider<ScreenManager> {
    private final MainActivityModule module;
    private Binding<com.jaynewstrom.screenswitcher.ScreenSwitcherState> screenSwitcherState;

    public ProvideScreenManagerProvidesAdapter(MainActivityModule module) {
      super("com.benjaminwicks.structureddatademo.ScreenManager", IS_SINGLETON, "com.benjaminwicks.structureddatademo.MainActivityModule", "provideScreenManager");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      screenSwitcherState = (Binding<com.jaynewstrom.screenswitcher.ScreenSwitcherState>) linker.requestBinding("com.jaynewstrom.screenswitcher.ScreenSwitcherState", MainActivityModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(screenSwitcherState);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.benjaminwicks.structureddatademo.ScreenManager>}.
     */
    @Override
    public ScreenManager get() {
      return module.provideScreenManager(screenSwitcherState.get());
    }
  }

  /**
   * A {@code Binding<com.jaynewstrom.screenswitcher.ScreenSwitcherState>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.jaynewstrom.screenswitcher.ScreenSwitcherState>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideScreenSwitcherStateProvidesAdapter extends ProvidesBinding<com.jaynewstrom.screenswitcher.ScreenSwitcherState>
      implements Provider<com.jaynewstrom.screenswitcher.ScreenSwitcherState> {
    private final MainActivityModule module;

    public ProvideScreenSwitcherStateProvidesAdapter(MainActivityModule module) {
      super("com.jaynewstrom.screenswitcher.ScreenSwitcherState", IS_SINGLETON, "com.benjaminwicks.structureddatademo.MainActivityModule", "provideScreenSwitcherState");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.jaynewstrom.screenswitcher.ScreenSwitcherState>}.
     */
    @Override
    public com.jaynewstrom.screenswitcher.ScreenSwitcherState get() {
      return module.provideScreenSwitcherState();
    }
  }
}
